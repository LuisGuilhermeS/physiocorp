Essa aplicação será usada para gerenciamento de agenda de pacientes, gerenciamento de check-in de alunos gympass.



<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Função para marcar áreas de dor no corpo
        document.addEventListener('DOMContentLoaded', function() {
            // Front body click handler
            document.getElementById('frontBody').addEventListener('click', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const painLevel = document.getElementById('frontPainLevel');
                painLevel.style.display = 'block';
                painLevel.style.left = `${x}px`;
                painLevel.style.top = `${y}px`;
                
                // Store click position for later use
                painLevel.dataset.x = x;
                painLevel.dataset.y = y;
            });
            
            // Back body click handler
            document.getElementById('backBody').addEventListener('click', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                const painLevel = document.getElementById('backPainLevel');
                painLevel.style.display = 'block';
                painLevel.style.left = `${x}px`;
                painLevel.style.top = `${y}px`;
                
                // Store click position for later use
                painLevel.dataset.x = x;
                painLevel.dataset.y = y;
            });
            
            // Confirm front pain
            document.getElementById('confirmFrontPain').addEventListener('click', function() {
                const painValue = document.getElementById('frontPainValue').value;
                if (painValue >= 0 && painValue <= 10) {
                    const painLevel = document.getElementById('frontPainLevel');
                    const x = painLevel.dataset.x;
                    const y = painLevel.dataset.y;
                    
                    // Remove existing marks
                    const existingMarks = document.querySelectorAll('#frontBody .marked-area');
                    existingMarks.forEach(mark => mark.remove());
                    
                    // Create new mark
                    const mark = document.createElement('div');
                    mark.className = 'marked-area';
                    mark.style.left = `${x - 25}px`;
                    mark.style.top = `${y - 25}px`;
                    mark.style.width = '50px';
                    mark.style.height = '50px';
                    mark.textContent = painValue;
                    
                    document.getElementById('frontBody').appendChild(mark);
                    painLevel.style.display = 'none';
                }
            });
            
            // Confirm back pain
            document.getElementById('confirmBackPain').addEventListener('click', function() {
                const painValue = document.getElementById('backPainValue').value;
                if (painValue >= 0 && painValue <= 10) {
                    const painLevel = document.getElementById('backPainLevel');
                    const x = painLevel.dataset.x;
                    const y = painLevel.dataset.y;
                    
                    // Remove existing marks
                    const existingMarks = document.querySelectorAll('#backBody .marked-area');
                    existingMarks.forEach(mark => mark.remove());
                    
                    // Create new mark
                    const mark = document.createElement('div');
                    mark.className = 'marked-area';
                    mark.style.left = `${x - 25}px`;
                    mark.style.top = `${y - 25}px`;
                    mark.style.width = '50px';
                    mark.style.height = '50px';
                    mark.textContent = painValue;
                    
                    document.getElementById('backBody').appendChild(mark);
                    painLevel.style.display = 'none';
                }
            });
            
            // Botão Voltar
            document.getElementById('backBtn').addEventListener('click', function() {
                window.location.href = 'index.php';
            });
            
            // Form submission
            document.getElementById('patientForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Aqui você adicionaria o código para enviar os dados para o servidor
                alert('Dados do paciente salvos com sucesso!');
                // window.location.href = 'index.php';
            });
            
        });
    </script>

-----------------------------------------------------antigo index.php
<body class="bg-light-green">
    <div class="container">
        <!--barra pesquisa-->
        <form action="GET">
        <div class="search-box mb-4 p-3 bg-white rounded shadow">
            <div class="input-group">
                <input type="text" name="search" id="search" class="form-control" placeholder="Pesquisar por nome...">
                <button class="btn btn-primary" id="searchBtn"><i class="fas fa-search"></i> Pesquisar</button>
            </div>
        </div>
        </form>
        <!--notificação-->
        <?php if (isset($printMsg) && $printMsg != ['']): ?>
            <p id="msg"><?= $printMsg ?></p>
        <?php endif; ?>
        <!--cabeçalho lista pacientes-->
        <table class="table table-bordered table-striped" id="table-view">
            <thead>
                <div class="patients-list">
                    <div class="card-header bg-light-gray text-center rouded shadow">
                        <tr>
                            <th scope="col">Data de Avaliação</th>
                            <th scope="col">Nome</th>
                            <th scope="col">Telefone</th>
                            <th scope="col" class="actions">Ações</th>
                        </tr>
                    </div>
                </div>
            </thead>
            <tbody class="rouded shadow">
                <?php if (count($patient_record) > 0): ?>
                    <?php foreach ($patient_record as $patient): ?>
                        <tr>
                            <td scope='row'><?= date("d/m/y", strtotime($patient['date_evaluation'])) ?></td>
                            <td scope='row'><?= $patient['name'] ?></td>
                            <td scope='row'><?= $patient['phone'] ?></td>
                            <td class='actions'>
                                <div class="d-flex flex-column flex-md-row gap-2 justify-content-center">
                                    <a class="btn btn-sm btn-primary me-1 view-btn" href="<?= $BASE_URL ?>show.php?id=<?= $patient['id'] ?>"><i
                                            class="fas fa-eye"></i></a>
                                    <a class="btn btn-sm btn-warning me-1 edit-btn" href="<?= $BASE_URL ?>cadastro.php?id=<?= $patient['id'] ?>"><i
                                            class="fas fa-edit"></i></a>
                                    <form class='d-inline-block' action="<?= $BASE_URL ?>/config/process.php" method="POST">
                                        <input type="hidden" name="type" value="delete">
                                        <input type="hidden" name="id" value="<?= $patient['id'] ?>">
                                        <button class="btn btn-sm btn-danger delete-btn" type="submit"
                                        onclick="return confirm('Deseja excluir esse cadastro?')"><i class="fas fa-trash"></i></button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="4">
                            <p id="empty-list-text"> Ainda não há pacientes cadastrados. Clique em<a href="<?= $BASE_URL ?>cadastro.php" class="fw-bold">Criar novo Cadastro</a>para adicionar um novo paciente.</p>
                        </td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
        <?php
        include_once 'templates/footer.php';
        ?>










        
// Se for uma requisição POST: salvar dados
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $data = json_decode(file_get_contents("php://input"), true);

    if ($data && isset($data['id']) && isset($data['nome']) && isset($data['freq'])) {
        $id = $data['id'];
        $nome = $data['nome'];
        $frequencia_json = json_encode($data['freq']);

        $stmt = $conn->prepare("INSERT INTO frequencias (id_paciente, nome, dados_frequencia) 
                                VALUES (?, ?, ?) 
                                ON DUPLICATE KEY UPDATE dados_frequencia = ?");
        $stmt->execute([$id, $nome, $frequencia_json, $frequencia_json]);

        echo json_encode(["status" => "salvo"]);
    } else {
        echo json_encode(["status" => "erro", "mensagem" => "Dados incompletos."]);
    }

    exit;
}

// Qualquer outro tipo de requisição
echo json_encode(["status" => "erro", "mensagem" => "Método não suportado."]);
============================== explicação chat =========================================================
tenho dois arquivos que farão o CRUD em diferentes tabelas de banco de dados, as variáveis vindo da superglobal post são $dado e $pacientGym para o meu process.php, como faço para manter um arquivo apenas para processar todos os dados? ou será necessário 2 tipos de arquivos, um para processar os $dado e outro para processar o $pacientGym?

O ChatGPT disse:
Você não precisa de dois arquivos separados para processar dados de diferentes tabelas (como $dado e $pacientGym). Com uma boa estrutura e lógica condicional, é totalmente possível manter um único process.php que:

Identifica de onde os dados vêm (qual tabela ou entidade deve ser manipulada),

Executa o CRUD correto com base nesse contexto.

✅ Abordagem recomendada: processar tudo em um só process.php
🧠 Estratégia:
Use uma chave identificadora no POST para saber qual tipo de operação e qual entidade (tabela) está sendo manipulada. Exemplo:

php
Copiar
Editar
$_POST['entity'] // pode ser 'user', 'gym', 'aluno', etc.
$_POST['action'] // pode ser 'create', 'update', 'delete', etc.
🧱 Estrutura sugerida para process.php:
php
Copiar
Editar
<?php
require 'conexao.php'; // ou include do seu arquivo de conexão

$entity = $_POST['entity'] ?? null;
$action = $_POST['action'] ?? null;

// Dados recebidos
$data = $_POST['dado'] ?? ($_POST['pacientGym'] ?? null);

if (!$entity || !$action || !$data) {
    die('Requisição inválida.');
}

switch ($entity) {
    case 'user':
        processUser($data, $action, $conn);
        break;

    case 'gym':
        processGym($data, $action, $conn);
        break;

    // outros casos para novas tabelas...
    default:
        die('Entidade desconhecida.');
}
🔁 Exemplo de funções separadas por entidade:
php
Copiar
Editar
function processUser($data, $action, $conn) {
    if ($action === 'create') {
        $stmt = $conn->prepare('INSERT INTO users (name, email) VALUES (:name, :email)');
        $stmt->execute([
            ':name' => $data['name'] ?? null,
            ':email' => $data['email'] ?? null
        ]);
    }
    // outros actions: update, delete...
}

function processGym($data, $action, $conn) {
    if ($action === 'create') {
        $stmt = $conn->prepare('INSERT INTO patient_record (name, age, hour, address, ddd, phone, howFind) 
            VALUES (:name, :age, :hour, :address, :ddd, :phone, :howFind)');
        $stmt->execute([
            ':name' => $data['name'] ?? null,
            ':age' => $data['age'] ?? null,
            ':hour' => $data['hour'] ?? null,
            ':address' => $data['address'] ?? null,
            ':ddd' => $data['ddd'] ?? null,
            ':phone' => $data['phone'] ?? null,
            ':howFind' => $data['howFind'] ?? null
        ]);
    }
    // outros actions: update, delete...
}
🧪 Exemplo de envio via POST:
Para user:
html
Copiar
Editar
<form method="POST" action="process.php">
    <input type="hidden" name="entity" value="user">
    <input type="hidden" name="action" value="create">
    <input type="text" name="dado[name]">
    <input type="email" name="dado[email]">
    <button type="submit">Enviar</button>
</form>
Para gym:
html
Copiar
Editar
<form method="POST" action="process.php">
    <input type="hidden" name="entity" value="gym">
    <input type="hidden" name="action" value="create">
    <input type="text" name="pacientGym[name]">
    <input type="text" name="pacientGym[age]">
    <!-- demais campos -->
    <button type="submit">Cadastrar</button>
</form>
✅ Vantagens desse modelo:
Um só arquivo process.php para tudo.

Código organizado e extensível.

Você pode reaproveitar funções para múltiplas entidades.

Fica fácil aplicar validação e autenticação centralizada.

Se quiser, posso te ajudar a transformar isso num esqueleto de projeto bem modular. Deseja isso?